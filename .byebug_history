Admin.find_by(id: 207)
admin_id = decoded_token[0]['admin_id']
Admin.find_by(id: admin_id)
admin_id = decoded_token[0]['admin_id']
decoded_token = JWT.decode(token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
token
exit
decoded_token_store_manager
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
decoded_token_store_manager = JWT.decode(store_manager_token, 'chung', true, algorithm: 'HS256')
store_manager_token = cookies.signed[:jwt_store_manager]
store_manager_token store_manager_token = cookies.signed[:jwt_store_manager]
decoded_token_store_manager
exit
store_manager_token 
decoded_token_store_manager
decoded_token
decoded_token_store_manager
exit
decoded_token_store_manager
token
store_manager_token
exit
decoded_token_store_manager[0]['store_manager_id']
decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')decoded_token_store_manager[0]
decoded_token_store_manager = JWT.decode(store_manager_token, ENV['JWT_SECRET'], true, algorithm: 'HS256')
store_manager_token
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
token
decoded_token_store_manager
exit
store_manager_token = request.cookie_jar.signed[:jwt_store_manager]
exit
request.cookie_jar.signed[:jwt_store_manager]
exit
StoreManager.find_by(id: store_manager_id )
store_manager_id 
